#include<GL/glut.h>

#include<GL/glu.h>

#include<stdio.h>

#include<GL/gl.h>

#include<math.h>

void table(double tableWid, double tableThick, double legthick, double legLen);

void tableLeg(double thick, double len);

void houses();

const float box_Size=8.0f;

const float dampingFactor=0.9;

const float springConstant=1.5;

const float iniLen=1.0f;

float movementA=0;

float movementB=0;

float movementC=0;

int count1=0;


float sf1=0;

float sf2=0;

//const float dt=1.0f/60;

float movementE=0;


class Vector3f
{
	public:
	float x,y,z;
	Vector3f(){};
	Vector3f(float,float,float);
	Vector3f operator + (Vector3f);
	Vector3f operator - (Vector3f);
	Vector3f operator * (Vector3f);
	Vector3f operator = (float);
	Vector3f operator * (float);
	Vector3f operator / (float);
	float len(Vector3f,Vector3f);
	};

Vector3f::Vector3f(float a,float b,float c)
{
    x=a;
    y=b;
    z=c;
}

Vector3f Vector3f::operator+(Vector3f param)
{
	Vector3f pos;
	pos.x=x+param.x;
	pos.y=y+param.y;
	pos.z=z+param.z;
	return(pos);
}

Vector3f Vector3f::operator-(Vector3f param)
{
	Vector3f pos;
	pos.x=x-param.x;
	pos.y=y-param.y;
	pos.z=z-param.z;
	return(pos);
}

Vector3f Vector3f::operator*(Vector3f param)
{
	Vector3f pos;
	pos.x=x*param.x;
	pos.y=y*param.y;
	pos.z=z*param.z;
    return(pos);
}

Vector3f Vector3f::operator /(float param)
{
	Vector3f pos;
	pos.x=x/param;
	pos.y=y/param;
	pos.z=z/param;
	return(pos);
}

Vector3f Vector3f::operator *(float param)
{
	Vector3f pos;
	pos.x=param*x;
	pos.y=param*y;
	pos.z=param*z;
	return(pos);
}

Vector3f Vector3f::operator =(float param)
{
	Vector3f pos;
	pos.x=param;
	pos.y=param;
	pos.z=param;
	return(pos);
}

float len(Vector3f a,Vector3f b)
{/* This is to get the distance between two points.*/
	Vector3f c;
	float dist=0;
	c=a-b;
	dist=sqrt((c.x*c.x)+(c.y*c.y)+(c.z*c.z));
	return dist;
}

struct Object
{/* To describe the properties of the balls*/
    Vector3f force;
	Vector3f vel;
	Vector3f pos;
	float mass;

	void add_force(Vector3f,float);
};

void Object::add_force(Vector3f force,float dt)
{
	vel=vel+(force/mass)*dt;
	pos=pos+vel*dt;
}

float springForce(Object a,Object b)
{

    if(((len(a.pos,b.pos))<1.6)){
    return (-(iniLen-(len(a.pos,b.pos))*springConstant));//+(len(a.vel,b.vel)*dampingFactor));
    }
    else
    return (-(iniLen-(len(a.pos,b.pos))*springConstant));//+(len(a.vel,b.vel)*dampingFactor));
}

    Vector3f object_A(0.0,0.0,0.0);
    Vector3f object_B(2.0,0.0,0.0);
    Vector3f object_C(4.0, 0.0, 0.0);
    Vector3f object_A_vel(0.0,0.0,0.0);
    Vector3f object_B_vel(0.0,0.0,0.0);
    Vector3f object_C_vel(0.0,0.0,0.0);
    Vector3f object_A_prev(0.0,0.0,0.0);
    Vector3f object_B_prev(0.0,0.0,0.0);
    Vector3f object_C_prev(0.0,0.0,0.0);


    Object sphere_A;
    Object sphere_B;
    Object sphere_C;

//Defining a sphere object
Object sphereObject(Object sphere)
{
    glPushMatrix();
    glTranslated(sphere.pos.x,sphere.pos.y,sphere.pos.z);
    //glutSolidSphere(0.2,150,150);
    glPopMatrix();

}

//Update the location of the worm
void update(int value)
{
    sf1=springForce(sphere_A,sphere_B);
    sf2=springForce(sphere_B,sphere_C);
    object_A=sphere_A.pos;
    object_A_vel=sphere_A.vel;
    object_B=sphere_B.pos;
    object_B_vel=sphere_B.vel;
    object_C=sphere_C.pos;
    object_C_vel=sphere_C.vel;
	movementE=movementE-0.025;
    if(count1==0){
    movementA=movementA+0.1;
    count1=1;
    }
    if(count1==1)
    {
    movementB=movementB+0.2;
    count1=0;
    }
    if(count1 == 0){
    movementC=movementC+0.3;
    count1=1;
    }
    glutPostRedisplay();
    glutTimerFunc(100,update,0);
}

void axis (double length)
{
	glPushMatrix();
	glBegin(GL_LINES);
	glVertex3d(0, 0, 0);
	glVertex3d(0,0,length);
	glEnd();
	glPopMatrix();
}

//Display the contents
void display()
{
	
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	double winHt=10.0;
	glOrtho(-winHt*64/48.0,winHt*64/48.0,-winHt,winHt,0.1,100.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(2.0, 1.0, 2.0, 1.4, -0.4, -0.4, 0.0, 1.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	
	
	glPushMatrix();
	glTranslated(0.0,-10.0,0.0);
	glColor3d(0.0,1.0,1.0);
	glScalef(8,8,8);
	table(6,0.02, 0.02, 0.7);
	glPopMatrix();
	
	glPushMatrix();
	glTranslated(0.0,-20.0,0.0);
	glColor3d(1.2,0.8,0.5);
	glScalef(8,8,8);
	table(6,0.02, 0.02, 0.7);
	glPopMatrix();
	
	glPushMatrix();
	glTranslated(0.0,-0.5,0.0);
	glColor3d(0.0,0.75,1.0);
	glScalef(18,8,8);
	table(6,0.02, 0.02, 0.7);
	glPopMatrix();
	
	houses();
	
//Details of masses A, B, C.
    sphere_A.mass=1000;
    sphere_A.pos=object_A;
    sphere_A.vel=object_A_vel;

    sphere_B.mass=500;
    sphere_B.pos=object_B;
    sphere_B.vel=object_B_vel;
        
    sphere_C.mass=100;
    sphere_C.pos=object_C;
    sphere_C.vel=object_C_vel;
    
    Vector3f springF_A=((sphere_B.pos-sphere_A.pos)/len(sphere_A.pos,sphere_B.pos))*(sf1);
   
    Vector3f springF_B=((sphere_B.pos-sphere_A.pos)/len(sphere_A.pos,sphere_B.pos))*((sf1));
    
    Vector3f springF_C=((sphere_C.pos-sphere_B.pos)/len(sphere_B.pos,sphere_C.pos))*(sf2);

    sphere_A.add_force(springF_A,0.5);
    sphere_B.add_force(springF_B*-1,0.5);
    sphere_C.add_force(springF_C*-2,0.5);
    
     glColor3f(0.0,1.0,1.0);
	glPushMatrix();
	glTranslated(len(sphere_A.pos,sphere_B.pos),0,0);
	sphereObject(sphere_A);
    glPopMatrix();


    glColor3f(1.0,0.0,1.0);
    glPushMatrix();
    glTranslated(len(sphere_A.pos,sphere_B.pos),2,2);
	sphereObject(sphere_B);
    glPopMatrix();
    
    glColor3f(1.0,1.0,0.0);
	glPushMatrix();
	glTranslated(len(sphere_A.pos,sphere_B.pos),4,4);
	sphereObject(sphere_C);
    glPopMatrix();

//All spheres assembled intlo a cube    
    glPushMatrix();
	glTranslated(movementE,0,3.0);
	glScaled(len(sphere_A.pos,sphere_B.pos)*10,1,1);
	glColor3d(0.75,0.75,0.75);
	glutSolidCube(0.25);
	glPopMatrix();
	
	glFlush();
}

//Leg for the table
void tableLeg(double thick, double len)
{
	glPushMatrix();
	glTranslated(0, len/2, 0);
	glScaled(thick, len, thick);	
	glutSolidCube(1.0);
	glPopMatrix();
}
//Table creation
void table(double tableWid, double tableThick, double legthick, double legLen)
{
	glPushMatrix();
	glTranslated(0,legLen, 0);
	glScaled(tableWid, tableThick, tableWid);
	glutSolidCube(1.0);
	glPopMatrix();
	double dist =0.95 *tableWid/2.0 - legthick / 2.0;
	glPushMatrix();
	glTranslated(dist,0,dist);
	tableLeg(legthick, legLen);
	glPopMatrix();
	glPushMatrix();
	glTranslated(-dist,0,-dist);
	tableLeg(legthick, legLen);
	glPopMatrix();
	glPushMatrix();
	glTranslated(-dist,0,dist);
	tableLeg(legthick, legLen);
	glPopMatrix();
	glPushMatrix();
	glTranslated(dist,0,-dist);
	tableLeg(legthick, legLen);
	glPopMatrix();
}
//Props used in the scene
void houses()
{	
	glPushMatrix();
	glTranslated(-7.0,8.0,-1.5);glScalef(4,4,4);
	glColor3d(1.0,0.8,0.0);
	glutSolidSphere(0.2,15,15);
	glPopMatrix();
        
        glPushMatrix();        
        glRotatef(-90,1,0,0);
        glTranslated(9.0,4.0,-5.0);glScalef(4,4,4);
    	glColor3d(1.0,0.5,0.3);
    	glutSolidCone(0.2,0.5,10,8);
    	glPopMatrix();
    	
    	glPushMatrix();
    	glTranslated(12.0,-3.0,-3.0);glScalef(4,4,4);
    	glColor3d(1.0,0.5,0.3);
    	tableLeg(0.1,2.0);
    	glPopMatrix();
	
	glPushMatrix();        
        glRotatef(-90,1,0,0);
        glTranslated(10.0,11.0,0.0);glScalef(4,4,4);
    	glColor3d(0.18,0.54,0.34);
    	glutSolidCone(1.0,0.8,10,8);
    	glPopMatrix();
    	
    	glPushMatrix();
	glTranslated(0.5,0.3,0.7);
	glColor3d(0.5,0.5,0.5);	glScalef(25,5,5);
	glutSolidCube(0.2);
	glPopMatrix();
	
	glPushMatrix();
  	glTranslated(-8.0,-5.0,3.0);
  	glScalef(3,3,3);
  	glColor3d(0.52,0.44,1.0);
  	glutSolidTorus(0.3,0.6, 15, 30);
	glPopMatrix();
    
    	glPushMatrix();
  	glTranslated(-5.0,-5.0,3.0);
  	glScalef(3,3,3);
  	glColor3d(1.0,0.19,0.19);
  	glutSolidTorus(0.3,0.6, 15, 30);
	glPopMatrix();
}
	
int main(int argc, char **argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(640,480);
	glutInitWindowPosition(100,100);
	glutCreateWindow("3D viewing");
	glutDisplayFunc(display);
	glClearColor(0.1f,0.1f,0.1f,0.0f);
	glViewport(0,0,640,480);
	glutTimerFunc(1000,update,0);
	glutMainLoop();
	return 0;
}
